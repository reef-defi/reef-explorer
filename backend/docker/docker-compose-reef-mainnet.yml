version: '3.7'

services:
  #
  # reef node
  #
  substrate-node:
    image: reef-node-mainnet/latest
    hostname: substrate-node
    build: ./reef-node-mainnet
    volumes:
      - 'substrate-data:/data'
    ports:
      - '30333:30333'
      - '9933:9933'
      - '9944:9944'
    expose:
      - '9944'
    command: -d /data --ws-max-connections 1000 --chain mainnet --pruning=archive --rpc-cors "*" --ws-port 9944 --port 30333 --unsafe-ws-external --no-prometheus --name 'Reef explorer' --telemetry-url 'wss://telemetry.polkadot.io/submit/ 0'
    restart: always
  #
  # SQL data base
  #
  postgres:
    image: postgres:13
    restart: always
    shm_size: 1gb
    volumes:
      - 'db-data:/var/lib/postgresql/data'
      - './sql/backend.sql:/docker-entrypoint-initdb.d/00_backend.sql'
      - './sql/contracts_mainnet.sql:/docker-entrypoint-initdb.d/01_contracts.sql'
      - './sql/counters.sql:/docker-entrypoint-initdb.d/02_counters.sql'
      - './sql/post_mainnet.sql:/docker-entrypoint-initdb.d/03_post.sql'
    environment:
      POSTGRES_USER: 'reefexplorer'
      POSTGRES_PASSWORD: 'reefexplorer'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U reefexplorer']
      interval: 5s
      timeout: 5s
      retries: 5
    # 
    # TODO: https://pgtune.leopard.in.ua/#/
    #

  #
  # Hasura GraphQL server
  #
  graphql-engine:
    image: hasura/graphql-engine:v1.3.3.cli-migrations-v2
    ports:
      - '8082:8080'
    volumes:
      - './hasura/metadata:/hasura-metadata'
    depends_on:
      - 'postgres'
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://reefexplorer:reefexplorer@postgres:5432/reefexplorer
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true' # set to "false" to disable console
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: public
      HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey

  #
  # Block crawler
  #
  crawler:
    image: crawler:latest
    build:
      context: ../
      dockerfile: ./docker/crawler/Dockerfile
    depends_on:
      - 'postgres'
      - 'substrate-node'
    restart: always
    environment:
      NODE_ENV: 'production'
      NODE_OPTIONS: '--max-old-space-size=8192'
      WS_PROVIDER_URL: 'ws://substrate-node:9944'
      SUBSTRATE_NETWORK: 'reef'
      # RANKING_DISABLE: 'true'
      # ACTIVE_ACCOUNTS_DISABLE: 'true'
      # BLOCK_LISTENER_DISABLE: 'true'
      # BLOCK_HARVESTER_DISABLE: 'true'
      NODE_PG_FORCE_NATIVE: 'true'
      #
      #   Available modes:
      #
      #   chunks:     Process batchs of 'BLOCK_HARVESTER_CHUNK_SIZE' blocks in parallel (faster)
      #   sequential: Slower but less resource-intensive
      #
      BLOCK_HARVESTER_MODE: 'chunks'
      BLOCK_HARVESTER_CHUNK_SIZE: '10'
      BLOCK_HARVESTER_STATS_PRECISION: '2'
      LOG_LEVEL: 'info'
      BLOCK_HARVESTER_START_DELAY_MS: '30000' # 30 sec
      ACTIVE_ACCOUNTS_START_DELAY_MS: '60000' # 1 min
      TOKEN_HOLDERS_START_DELAY_MS: '120000' # 2 min
      RANKING_START_DELAY_MS: '180000' # 3 min
      ACTIVE_ACCOUNTS_CHUNK_SIZE: '100'

  #
  # API
  #
  api:
    image: api:latest
    ports:
      - '8000:8000'
    build:
      context: ../../api
      dockerfile: Dockerfile
    depends_on:
      - 'postgres'
      - 'substrate-node'
    restart: always
    environment:
      - NODE_ENV=production
      - NODE_PORT=8000
      - RECAPTCHA_SECRET=6LfNcPIaAAAAADSldnLXXxSrXIYH532l0cSsfDEU

  #
  # Contract verificator
  #
  verificator:
    image: verificator:latest
    build:
      context: ../../verificator
      dockerfile: Dockerfile
    depends_on:
      - 'postgres'
      - 'substrate-node'
    restart: always

#
# Persistent volumes
#
volumes:
  sql:
  db-data: {}
  substrate-data: {}
