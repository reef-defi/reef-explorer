
import { ABI } from "../../src/types";
import { ContractStorage } from "../utils";

export default {
  name: "MerkleTree",
  filename: "MerkleTree.sol",
  arguments: JSON.stringify([]),
  bytecode: "0x608060405234801561001057600080fd5b506040805160c081018252600c608082019081526b30b634b1b290169f103137b160a11b60a0830152815281518083018352600b8082526a626f62202d3e206461766560a81b6020838101919091528084019290925283518085018552600e81526d6361726f6c202d3e20616c69636560901b8184015283850152835180850190945283526a3230bb3290169f103137b160a91b90830152606081019190915260005b60048110156101305760008282600481106100de57634e487b7160e01b600052603260045260246000fd5b60200201516040516020016100f39190610244565b60408051601f1981840301815291905280516020918201208254600181018455600093845291909220015580610128816102cc565b9150506100b3565b50600460005b811561023c5760005b61014a6001846102b5565b81101561021d5760008061015e838561027d565b8154811061017c57634e487b7160e01b600052603260045260246000fd5b600091825260208220015490610192848661027d565b61019d90600161027d565b815481106101bb57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546040516020016101e0929190918252602082015260400190565b60408051601f1981840301815291905280516020918201208254600181018455600093845291909220015561021660028261027d565b905061013f565b50610228828261027d565b9050610235600283610295565b9150610136565b5050506102fd565b60008251815b81811015610264576020818601810151858301520161024a565b818111156102725782828501525b509190910192915050565b60008219821115610290576102906102e7565b500190565b6000826102b057634e487b7160e01b81526012600452602481fd5b500490565b6000828210156102c7576102c76102e7565b500390565b60006000198214156102e0576102e06102e7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b61038e8061030c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806321fb335c14610046578063501895ae1461006e5780635ca1e1651461008f575b600080fd5b6100596100543660046101ce565b610097565b60405190151581526020015b60405180910390f35b61008161007c3660046102a4565b61016d565b604051908152602001610065565b61008161018e565b600082815b86518110156101615760008782815181106100c757634e487b7160e01b600052603260045260246000fd5b602002602001015190506002856100de9190610302565b610113576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610140565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b61014b6002866102bc565b9450508080610159906102e7565b91505061009c565b50909314949350505050565b6000818154811061017d57600080fd5b600091825260209091200154905081565b6000805481906101a0906001906102d0565b815481106101be57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905090565b600080600080608085870312156101e3578384fd5b843567ffffffffffffffff808211156101fa578586fd5b818701915087601f83011261020d578586fd5b813560208282111561022157610221610342565b8160051b604051601f19603f8301168101818110868211171561024657610246610342565b604052838152828101945085830182870184018d1015610264578a8bfd5b8a96505b84871015610286578035865260019690960195948301948301610268565b509b918a01359a505060408901359860600135975095505050505050565b6000602082840312156102b5578081fd5b5035919050565b6000826102cb576102cb61032c565b500490565b6000828210156102e2576102e2610316565b500390565b60006000198214156102fb576102fb610316565b5060010190565b6000826103115761031161032c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220acbd7394d1ab4bfc1a22de7498a79a4fb3809baf258222c066af8a92da25fe6864736f6c63430008040033",
  abi: [{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"getRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"hashes","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"bytes32","name":"root","type":"bytes32"},{"internalType":"bytes32","name":"leaf","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"verify","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"}] as ABI,
  sources: JSON.stringify({"MerkleTree.sol":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract MerkleProof {\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        uint index\n    ) public pure returns (bool) {\n        bytes32 hash = leaf;\n\n        for (uint i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (index % 2 == 0) {\n                hash = keccak256(abi.encodePacked(hash, proofElement));\n            } else {\n                hash = keccak256(abi.encodePacked(proofElement, hash));\n            }\n\n            index = index / 2;\n        }\n\n        return hash == root;\n    }\n}\n\ncontract MerkleTree is MerkleProof {\n    bytes32[] public hashes;\n\n    constructor() {\n        string[4] memory transactions = [\n            \"alice -> bob\",\n            \"bob -> dave\",\n            \"carol -> alice\",\n            \"dave -> bob\"\n        ];\n\n        for (uint i = 0; i < transactions.length; i++) {\n            hashes.push(keccak256(abi.encodePacked(transactions[i])));\n        }\n\n        uint n = transactions.length;\n        uint offset = 0;\n\n        while (n > 0) {\n            for (uint i = 0; i < n - 1; i += 2) {\n                hashes.push(\n                    keccak256(\n                        abi.encodePacked(hashes[offset + i], hashes[offset + i + 1])\n                    )\n                );\n            }\n            offset += n;\n            n = n / 2;\n        }\n    }\n\n    function getRoot() public view returns (bytes32) {\n        return hashes[hashes.length - 1];\n    }\n\n    /* verify\n    3rd leaf\n    0x1bbd78ae6188015c4a6772eb1526292b5985fc3272ead4c65002240fb9ae5d13\n\n    root\n    0x074b43252ffb4a469154df5fb7fe4ecce30953ba8b7095fe1e006185f017ad10\n\n    index\n    2\n\n    proof\n    0x948f90037b4ea787c14540d9feb1034d4a5bc251b9b5f8e57d81e4b470027af8\n    0x63ac1b92046d474f84be3aa0ee04ffe5600862228c81803cce07ac40484aee43\n    */\n}"}),
} as ContractStorage
