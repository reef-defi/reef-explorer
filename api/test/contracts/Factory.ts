
import { ABI } from "../../src/types";
import { ContractStorage } from "../utils";

export default {
  name: "Factory",
  filename: "PrecomputeContractAddress.sol",
  arguments: JSON.stringify([]),
  bytecode: "0x608060405234801561001057600080fd5b50610a0f806100206000396000f3fe6080604052600436106100345760003560e01c806381871cbc1461003957806394ca2cb5146100765780639c4ae2d0146100b3575b600080fd5b34801561004557600080fd5b50610060600480360381019061005b9190610284565b6100cf565b60405161006d91906104ae565b60405180910390f35b34801561008257600080fd5b5061009d600480360381019061009891906102c0565b610145565b6040516100aa919061046a565b60405180910390f35b6100cd60048036038101906100c891906102c0565b61018f565b005b60606000604051806020016100e3906101e5565b6020820181038252601f19601f82011660405250905080848460405160200161010d929190610485565b60405160208183030381529060405260405160200161012d929190610446565b60405160208183030381529060405291505092915050565b60008060ff60f81b3084868051906020012060405160200161016a94939291906103f8565b6040516020818303038152906040528051906020012090508060001c91505092915050565b60008183516020850134f59050803b6101a757600080fd5b7fb03c53b28e78a88e31607a27e1fa48234dce28d5d9d9ec7b295aeb02e674a1e181836040516101d8929190610485565b60405180910390a1505050565b6102ea806106f083390190565b6000610205610200846104f5565b6104d0565b90508281526020810184848401111561021d57600080fd5b6102288482856105bf565b509392505050565b60008135905061023f816106c1565b92915050565b600082601f83011261025657600080fd5b81356102668482602086016101f2565b91505092915050565b60008135905061027e816106d8565b92915050565b6000806040838503121561029757600080fd5b60006102a585828601610230565b92505060206102b68582860161026f565b9150509250929050565b600080604083850312156102d357600080fd5b600083013567ffffffffffffffff8111156102ed57600080fd5b6102f985828601610245565b925050602061030a8582860161026f565b9150509250929050565b61031d8161054d565b82525050565b61033461032f8261054d565b610632565b82525050565b61034b6103468261055f565b610644565b82525050565b61036261035d8261058b565b61064e565b82525050565b600061037382610526565b61037d8185610531565b935061038d8185602086016105ce565b610396816106a3565b840191505092915050565b60006103ac82610526565b6103b68185610542565b93506103c68185602086016105ce565b80840191505092915050565b6103db816105b5565b82525050565b6103f26103ed826105b5565b61066a565b82525050565b6000610404828761033a565b6001820191506104148286610323565b60148201915061042482856103e1565b6020820191506104348284610351565b60208201915081905095945050505050565b600061045282856103a1565b915061045e82846103a1565b91508190509392505050565b600060208201905061047f6000830184610314565b92915050565b600060408201905061049a6000830185610314565b6104a760208301846103d2565b9392505050565b600060208201905081810360008301526104c88184610368565b905092915050565b60006104da6104eb565b90506104e68282610601565b919050565b6000604051905090565b600067ffffffffffffffff8211156105105761050f610674565b5b610519826106a3565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061055882610595565b9050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156105ec5780820151818401526020810190506105d1565b838111156105fb576000848401525b50505050565b61060a826106a3565b810181811067ffffffffffffffff8211171561062957610628610674565b5b80604052505050565b600061063d82610658565b9050919050565b6000819050919050565b6000819050919050565b6000610663826106b4565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b6106ca8161054d565b81146106d557600080fd5b50565b6106e1816105b5565b81146106ec57600080fd5b5056fe60806040526040516102ea3803806102ea8339818101604052810190610025919061009d565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001819055505050610143565b60008151905061008281610115565b92915050565b6000815190506100978161012c565b92915050565b600080604083850312156100b057600080fd5b60006100be85828601610073565b92505060206100cf85828601610088565b9150509250929050565b60006100e4826100eb565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61011e816100d9565b811461012957600080fd5b50565b6101358161010b565b811461014057600080fd5b50565b610198806101526000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806312065fe0146100465780638da5cb5b14610064578063c298557814610082575b600080fd5b61004e6100a0565b60405161005b919061010b565b60405180910390f35b61006c6100a8565b60405161007991906100f0565b60405180910390f35b61008a6100cc565b604051610097919061010b565b60405180910390f35b600047905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b6100db81610126565b82525050565b6100ea81610158565b82525050565b600060208201905061010560008301846100d2565b92915050565b600060208201905061012060008301846100e1565b92915050565b600061013182610138565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600081905091905056fea26469706673582212208c18fbbcf81d5fa1c2d85c17ba0cdbbbdde8c151662ed8cf8e35b4a58fab49db64736f6c63430008040033a26469706673582212206acf9f5a29dec730e1a8748fdfd65abb54a1214cde3f84560e27ecb866fbbae464736f6c63430008040033",
  abi: [{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"addr","type":"address"},{"indexed":false,"internalType":"uint256","name":"salt","type":"uint256"}],"name":"Deployed","type":"event"},{"inputs":[{"internalType":"bytes","name":"bytecode","type":"bytes"},{"internalType":"uint256","name":"_salt","type":"uint256"}],"name":"deploy","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"bytecode","type":"bytes"},{"internalType":"uint256","name":"_salt","type":"uint256"}],"name":"getAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_foo","type":"uint256"}],"name":"getBytecode","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"}] as ABI,
  sources: JSON.stringify({"PrecomputeContractAddress.sol":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract Factory {\n    event Deployed(address addr, uint salt);\n\n    // 1. Get bytecode of contract to be deployed\n    // NOTE: _owner and _foo are arguments of the TestContract's constructor\n    function getBytecode(address _owner, uint _foo) public pure returns (bytes memory) {\n        bytes memory bytecode = type(TestContract).creationCode;\n\n        return abi.encodePacked(bytecode, abi.encode(_owner, _foo));\n    }\n\n    // 2. Compute the address of the contract to be deployed\n    // NOTE: _salt is a random number used to create an address\n    function getAddress(bytes memory bytecode, uint _salt)\n        public\n        view\n        returns (address)\n    {\n        bytes32 hash = keccak256(\n            abi.encodePacked(bytes1(0xff), address(this), _salt, keccak256(bytecode))\n        );\n\n        // NOTE: cast last 20 bytes of hash to address\n        return address(uint160(uint(hash)));\n    }\n\n    // 3. Deploy the contract\n    // NOTE:\n    // Check the event log Deployed which contains the address of the deployed TestContract.\n    // The address in the log should equal the address computed from above.\n    function deploy(bytes memory bytecode, uint _salt) public payable {\n        address addr;\n\n        /*\n        NOTE: How to call create2\n\n        create2(v, p, n, s)\n        create new contract with code at memory p to p + n\n        and send v wei\n        and return the new address\n        where new address = first 20 bytes of keccak256(0xff + address(this) + s + keccak256(mem[pâ€¦(p+n)))\n              s = big-endian 256-bit value\n        */\n        assembly {\n            addr := create2(\n                callvalue(), // wei sent with current call\n                // Actual code starts after skipping the first 32 bytes\n                add(bytecode, 0x20),\n                mload(bytecode), // Load the size of code contained in the first 32 bytes\n                _salt // Salt from function arguments\n            )\n\n            if iszero(extcodesize(addr)) {\n                revert(0, 0)\n            }\n        }\n\n        emit Deployed(addr, _salt);\n    }\n}\n\ncontract TestContract {\n    address public owner;\n    uint public foo;\n\n    constructor(address _owner, uint _foo) payable {\n        owner = _owner;\n        foo = _foo;\n    }\n\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}"}),
} as ContractStorage
