
import { ABI } from "../../src/types";
import { ContractStorage } from "../utils";

export default {
  name: "Factory",
  filename: "PrecomputeContractAddress.sol",
  arguments: JSON.stringify([]),
  bytecode: "0x608060405234801561001057600080fd5b5061050e806100206000396000f3fe6080604052600436106100345760003560e01c806381871cbc1461003957806394ca2cb51461006f5780639c4ae2d0146100fe575b600080fd5b34801561004557600080fd5b506100596100543660046101fa565b610113565b6040516100669190610311565b60405180910390f35b34801561007b57600080fd5b506100e661008a366004610230565b8151602092830120604080516001600160f81b0319818601523060601b6bffffffffffffffffffffffff191660218201526035810193909352605580840192909252805180840390920182526075909201909152805191012090565b6040516001600160a01b039091168152602001610066565b61011161010c366004610230565b61018e565b005b6060600060405180602001610127906101ed565b601f1982820381018352601f9091011660408181526001600160a01b03871660208301528101859052909150819060600160408051601f198184030181529082905261017692916020016102e2565b60405160208183030381529060405291505092915050565b60008183516020850134f59050803b6101a657600080fd5b604080516001600160a01b0383168152602081018490527fb03c53b28e78a88e31607a27e1fa48234dce28d5d9d9ec7b295aeb02e674a1e1910160405180910390a1505050565b61014e8061038b83390190565b6000806040838503121561020c578182fd5b82356001600160a01b0381168114610222578283fd5b946020939093013593505050565b60008060408385031215610242578182fd5b823567ffffffffffffffff80821115610259578384fd5b818501915085601f83011261026c578384fd5b81358181111561027e5761027e610374565b604051601f8201601f19908116603f011681019083821181831017156102a6576102a6610374565b816040528281528860208487010111156102be578687fd5b82602086016020830137918201602090810196909652509694909301359450505050565b600083516102f4818460208801610344565b835190830190610308818360208801610344565b01949350505050565b6020815260008251806020840152610330816040850160208701610344565b601f01601f19169190910160400192915050565b60005b8381101561035f578181015183820152602001610347565b8381111561036e576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfe608060405260405161014e38038061014e8339810160408190526100229161004b565b600080546001600160a01b0319166001600160a01b039390931692909217909155600155610083565b6000806040838503121561005d578182fd5b82516001600160a01b0381168114610073578283fd5b6020939093015192949293505050565b60bd806100916000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806312065fe01460415780638da5cb5b146056578063c298557814607f575b600080fd5b475b6040519081526020015b60405180910390f35b6000546068906001600160a01b031681565b6040516001600160a01b039091168152602001604d565b60436001548156fea2646970667358221220ca339d2960b6613343ff57995ce7756fa5a62a81f11729720743919fb6eca06364736f6c63430008040033a26469706673582212200b92861bfdc23f662c9659d6ce31e4e50469e1f687159903521d0d7fb2c57c5c64736f6c63430008040033",
  abi: [{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"addr","type":"address"},{"indexed":false,"internalType":"uint256","name":"salt","type":"uint256"}],"name":"Deployed","type":"event"},{"inputs":[{"internalType":"bytes","name":"bytecode","type":"bytes"},{"internalType":"uint256","name":"_salt","type":"uint256"}],"name":"deploy","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"bytecode","type":"bytes"},{"internalType":"uint256","name":"_salt","type":"uint256"}],"name":"getAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_foo","type":"uint256"}],"name":"getBytecode","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"}] as ABI,
  sources: JSON.stringify({"PrecomputeContractAddress.sol":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract Factory {\n    event Deployed(address addr, uint salt);\n\n    // 1. Get bytecode of contract to be deployed\n    // NOTE: _owner and _foo are arguments of the TestContract's constructor\n    function getBytecode(address _owner, uint _foo) public pure returns (bytes memory) {\n        bytes memory bytecode = type(TestContract).creationCode;\n\n        return abi.encodePacked(bytecode, abi.encode(_owner, _foo));\n    }\n\n    // 2. Compute the address of the contract to be deployed\n    // NOTE: _salt is a random number used to create an address\n    function getAddress(bytes memory bytecode, uint _salt)\n        public\n        view\n        returns (address)\n    {\n        bytes32 hash = keccak256(\n            abi.encodePacked(bytes1(0xff), address(this), _salt, keccak256(bytecode))\n        );\n\n        // NOTE: cast last 20 bytes of hash to address\n        return address(uint160(uint(hash)));\n    }\n\n    // 3. Deploy the contract\n    // NOTE:\n    // Check the event log Deployed which contains the address of the deployed TestContract.\n    // The address in the log should equal the address computed from above.\n    function deploy(bytes memory bytecode, uint _salt) public payable {\n        address addr;\n\n        /*\n        NOTE: How to call create2\n\n        create2(v, p, n, s)\n        create new contract with code at memory p to p + n\n        and send v wei\n        and return the new address\n        where new address = first 20 bytes of keccak256(0xff + address(this) + s + keccak256(mem[pâ€¦(p+n)))\n              s = big-endian 256-bit value\n        */\n        assembly {\n            addr := create2(\n                callvalue(), // wei sent with current call\n                // Actual code starts after skipping the first 32 bytes\n                add(bytecode, 0x20),\n                mload(bytecode), // Load the size of code contained in the first 32 bytes\n                _salt // Salt from function arguments\n            )\n\n            if iszero(extcodesize(addr)) {\n                revert(0, 0)\n            }\n        }\n\n        emit Deployed(addr, _salt);\n    }\n}\n\ncontract TestContract {\n    address public owner;\n    uint public foo;\n\n    constructor(address _owner, uint _foo) payable {\n        owner = _owner;\n        foo = _foo;\n    }\n\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}"}),
} as ContractStorage
