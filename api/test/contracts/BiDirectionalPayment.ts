
import { ABI } from "../../src/types";
import { ContractStorage } from "../utils";

export default {
  name: "BiDirectionalPayment",
  filename: "BiDirectionalPaymentChannel.sol",
  arguments: JSON.stringify([["0x82A258cb20E2ADB4788153cd5eb5839615EcE9a0","0x69535cB2F9Db4FC5f2867A27a1eD8e6612F787bA"],["0","0"],"12947124124124241812","100000000"]),
  bytecode: "0x60806040526040516200296b3803806200296b83398181016040528101906200002991906200056a565b82620000c28160016002811062000069577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015182600060028110620000a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151620003f860201b62000a851790919060201c565b47101562000107576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000fe9062000694565b60405180910390fd5b4283116200014c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200014390620006b6565b60405180910390fd5b6000821162000192576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200018990620006d8565b60405180910390fd5b60005b6002811015620003de576000868260028110620001db577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201519050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161562000272576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002699062000672565b60405180910390fd5b8060008360028110620002ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508582600281106200037f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080620003d59062000857565b91505062000195565b508260058190555081600481905550505050505062000a12565b6000818362000408919062000786565b905092915050565b600062000427620004218462000723565b620006fa565b905080828560208602820111156200043e57600080fd5b60005b85811015620004725781620004578882620004e8565b84526020840193506020830192505060018101905062000441565b5050509392505050565b6000620004936200048d846200074c565b620006fa565b90508082856020860282011115620004aa57600080fd5b60005b85811015620004de5781620004c3888262000553565b845260208401935060208301925050600181019050620004ad565b5050509392505050565b600081519050620004f981620009de565b92915050565b600082601f8301126200051157600080fd5b60026200052084828562000410565b91505092915050565b600082601f8301126200053b57600080fd5b60026200054a8482856200047c565b91505092915050565b6000815190506200056481620009f8565b92915050565b60008060008060c085870312156200058157600080fd5b60006200059187828801620004ff565b9450506040620005a48782880162000529565b9350506080620005b78782880162000553565b92505060a0620005ca8782880162000553565b91505092959194509250565b6000620005e560138362000775565b9150620005f28262000914565b602082019050919050565b60006200060c603c8362000775565b915062000619826200093d565b604082019050919050565b60006200063360188362000775565b915062000640826200098c565b602082019050919050565b60006200065a601c8362000775565b91506200066782620009b5565b602082019050919050565b600060208201905081810360008301526200068d81620005d6565b9050919050565b60006020820190508181036000830152620006af81620005fd565b9050919050565b60006020820190508181036000830152620006d18162000624565b9050919050565b60006020820190508181036000830152620006f3816200064b565b9050919050565b60006200070662000719565b905062000714828262000821565b919050565b6000604051905090565b600067ffffffffffffffff821115620007415762000740620008d4565b5b602082029050919050565b600067ffffffffffffffff8211156200076a5762000769620008d4565b5b602082029050919050565b600082825260208201905092915050565b6000620007938262000817565b9150620007a08362000817565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620007d857620007d7620008a5565b5b828201905092915050565b6000620007f082620007f7565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200082c8262000903565b810181811067ffffffffffffffff821117156200084e576200084d620008d4565b5b80604052505050565b6000620008648262000817565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200089a5762000899620008a5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f75736572206d75737420626520756e6971756500000000000000000000000000600082015250565b7f62616c616e6365206f6620636f6e7472616374206d757374206265203e3d207460008201527f6f2074686520746f74616c2062616c616e6365206f6620757365727300000000602082015250565b7f45787069726174696f6e206d757374206265203e206e6f770000000000000000600082015250565b7f4368616c6c656e676520706572696f64206d757374206265203e203000000000600082015250565b620009e981620007e3565b8114620009f557600080fd5b50565b62000a038162000817565b811462000a0f57600080fd5b50565b611f498062000a226000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80634209fff1116100665780634209fff1146101325780638622a68914610162578063a0ff499914610180578063affed0e01461019c578063f3f480d9146101ba57610093565b806321e668681461009857806327e235e3146100c8578063365b98b2146100f85780633ccfd60b14610128575b600080fd5b6100b260048036038101906100ad91906112b6565b6101d8565b6040516100bf919061173d565b60405180910390f35b6100e260048036038101906100dd919061128d565b61030d565b6040516100ef91906118fd565b60405180910390f35b610112600480360381019061010d91906113ac565b610325565b60405161011f9190611722565b60405180910390f35b61013061035b565b005b61014c6004803603810190610147919061128d565b6105b3565b604051610159919061173d565b60405180910390f35b61016a6105d3565b60405161017791906118fd565b60405180910390f35b61019a60048036038101906101959190611345565b6105d9565b005b6101a4610a79565b6040516101b191906118fd565b60405180910390f35b6101c2610a7f565b6040516101cf91906118fd565b60405180910390f35b600080600090505b60028110156102fe57600061026d888360028110610227577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015161025f898888604051602001610244939291906116aa565b60405160208183030381529060405280519060200120610a9b565b610acb90919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff168683600281106102bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015173ffffffffffffffffffffffffffffffffffffffff16149050806102ea57600092505050610304565b5080806102f690611b3b565b9150506101e0565b50600190505b95945050505050565b60036020528060005260406000206000915090505481565b6000816002811061033557600080fd5b016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166103e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103de9061187d565b60405180910390fd5b60055442101561042c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610423906117fd565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff16826040516104db9061170d565b60006040518083038185875af1925050503d8060008114610518576040519150601f19603f3d011682016040523d82523d6000602084013e61051d565b606091505b5050905080610561576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610558906117dd565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364836040516105a791906118fd565b60405180910390a25050565b60026020528060005260406000206000915054906101000a900460ff1681565b60055481565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065c9061187d565b60405180910390fd5b808383610670611021565b60005b600281101561075b57600081600281106106b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828260028110610711577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061075390611b3b565b915050610673565b5061076984308386866101d8565b6107a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079f9061181d565b60405180910390fd5b86610838816001600281106107e6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015182600060028110610825577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151610a8590919063ffffffff16565b47101561087a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610871906118bd565b60405180910390fd5b60055442106108be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b5906118dd565b60405180910390fd5b6006548711610902576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f99061185d565b60405180910390fd5b60005b60028110156109fc57888160028110610947577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015160036000808460028110610989577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080806109f490611b3b565b915050610905565b5086600681905550610a1960045442610a8590919063ffffffff16565b6005819055503373ffffffffffffffffffffffffffffffffffffffff167f5050c6e2a6fc173775ce4852f893c9e5aaeff00101f3aef75e0ec263cf083ca9600654604051610a6791906118fd565b60405180910390a25050505050505050565b60065481565b60045481565b60008183610a939190611a34565b905092915050565b600081604051602001610aae91906116e7565b604051602081830303815290604052805190602001209050919050565b6000806000610ada8585610af2565b91509150610ae781610b75565b819250505092915050565b600080604183511415610b345760008060006020860151925060408601519150606086015160001a9050610b2887828585610ec6565b94509450505050610b6e565b604083511415610b65576000806020850151915060408501519050610b5a868383610fd3565b935093505050610b6e565b60006002915091505b9250929050565b60006004811115610baf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115610be8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610bf357610ec3565b60016004811115610c2d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115610c66577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9e9061179d565b60405180910390fd5b60026004811115610ce1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115610d1a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610d5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d52906117bd565b60405180910390fd5b60036004811115610d95577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115610dce577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610e0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e069061183d565b60405180910390fd5b600480811115610e48577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115610e81577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610ec2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb99061189d565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610f01576000600391509150610fca565b601b8560ff1614158015610f195750601c8560ff1614155b15610f2b576000600491509150610fca565b600060018787878760405160008152602001604052604051610f509493929190611758565b6020604051602081039080840390855afa158015610f72573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610fc157600060019250925050610fca565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c01905061101387828885610ec6565b935093505050935093915050565b6040518060400160405280600290602082028036833780820191505090505090565b60006110566110518461193d565b611918565b9050808285602086028201111561106c57600080fd5b60005b8581101561109c578161108288826111c4565b84526020840193506020830192505060018101905061106f565b5050509392505050565b60006110b96110b484611963565b611918565b905080828560208602820111156110cf57600080fd5b60005b8581101561111957813567ffffffffffffffff8111156110f157600080fd5b8086016110fe898261124e565b855260208501945060208401935050506001810190506110d2565b5050509392505050565b600061113661113184611989565b611918565b9050808285602086028201111561114c57600080fd5b60005b8581101561117c57816111628882611278565b84526020840193506020830192505060018101905061114f565b5050509392505050565b6000611199611194846119af565b611918565b9050828152602081018484840111156111b157600080fd5b6111bc848285611afb565b509392505050565b6000813590506111d381611ee5565b92915050565b600082601f8301126111ea57600080fd5b60026111f7848285611043565b91505092915050565b600082601f83011261121157600080fd5b600261121e8482856110a6565b91505092915050565b600082601f83011261123857600080fd5b6002611245848285611123565b91505092915050565b600082601f83011261125f57600080fd5b813561126f848260208601611186565b91505092915050565b60008135905061128781611efc565b92915050565b60006020828403121561129f57600080fd5b60006112ad848285016111c4565b91505092915050565b600080600080600060e086880312156112ce57600080fd5b600086013567ffffffffffffffff8111156112e857600080fd5b6112f488828901611200565b9550506020611305888289016111c4565b9450506040611316888289016111d9565b935050608061132788828901611227565b92505060c061133888828901611278565b9150509295509295909350565b60008060006080848603121561135a57600080fd5b600061136886828701611227565b935050604061137986828701611278565b925050606084013567ffffffffffffffff81111561139657600080fd5b6113a286828701611200565b9150509250925092565b6000602082840312156113be57600080fd5b60006113cc84828501611278565b91505092915050565b60006113e18383611675565b60208301905092915050565b6113f681611a9c565b82525050565b61140d61140882611a8a565b611b84565b82525050565b61141c816119ea565b6114268184611a02565b9250611431826119e0565b8060005b8381101561146257815161144987826113d5565b9650611454836119f5565b925050600181019050611435565b505050505050565b61147381611aae565b82525050565b61148281611aba565b82525050565b61149961149482611aba565b611b96565b82525050565b60006114ac601883611a18565b91506114b782611c38565b602082019050919050565b60006114cf601f83611a18565b91506114da82611c61565b602082019050919050565b60006114f2601c83611a29565b91506114fd82611c8a565b601c82019050919050565b6000611515601483611a18565b915061152082611cb3565b602082019050919050565b6000611538602483611a18565b915061154382611cdc565b604082019050919050565b600061155b601183611a18565b915061156682611d2b565b602082019050919050565b600061157e602283611a18565b915061158982611d54565b604082019050919050565b60006115a1602c83611a18565b91506115ac82611da3565b604082019050919050565b60006115c4600883611a18565b91506115cf82611df2565b602082019050919050565b60006115e7602283611a18565b91506115f282611e1b565b604082019050919050565b600061160a603c83611a18565b915061161582611e6a565b604082019050919050565b600061162d601883611a18565b915061163882611eb9565b602082019050919050565b6000611650600083611a0d565b915061165b82611ee2565b600082019050919050565b61166f81611ae4565b82525050565b61167e81611ae4565b82525050565b61169561169082611ae4565b611bb2565b82525050565b6116a481611aee565b82525050565b60006116b682866113fc565b6014820191506116c68285611413565b6040820191506116d68284611684565b602082019150819050949350505050565b60006116f2826114e5565b91506116fe8284611488565b60208201915081905092915050565b600061171882611643565b9150819050919050565b600060208201905061173760008301846113ed565b92915050565b6000602082019050611752600083018461146a565b92915050565b600060808201905061176d6000830187611479565b61177a602083018661169b565b6117876040830185611479565b6117946060830184611479565b95945050505050565b600060208201905081810360008301526117b68161149f565b9050919050565b600060208201905081810360008301526117d6816114c2565b9050919050565b600060208201905081810360008301526117f681611508565b9050919050565b600060208201905081810360008301526118168161152b565b9050919050565b600060208201905081810360008301526118368161154e565b9050919050565b6000602082019050818103600083015261185681611571565b9050919050565b6000602082019050818103600083015261187681611594565b9050919050565b60006020820190508181036000830152611896816115b7565b9050919050565b600060208201905081810360008301526118b6816115da565b9050919050565b600060208201905081810360008301526118d6816115fd565b9050919050565b600060208201905081810360008301526118f681611620565b9050919050565b60006020820190506119126000830184611666565b92915050565b6000611922611933565b905061192e8282611b0a565b919050565b6000604051905090565b600067ffffffffffffffff82111561195857611957611beb565b5b602082029050919050565b600067ffffffffffffffff82111561197e5761197d611beb565b5b602082029050919050565b600067ffffffffffffffff8211156119a4576119a3611beb565b5b602082029050919050565b600067ffffffffffffffff8211156119ca576119c9611beb565b5b6119d382611c1a565b9050602081019050919050565b6000819050919050565b600060029050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000611a3f82611ae4565b9150611a4a83611ae4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611a7f57611a7e611bbc565b5b828201905092915050565b6000611a9582611ac4565b9050919050565b6000611aa782611ac4565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b611b1382611c1a565b810181811067ffffffffffffffff82111715611b3257611b31611beb565b5b80604052505050565b6000611b4682611ae4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611b7957611b78611bbc565b5b600182019050919050565b6000611b8f82611ba0565b9050919050565b6000819050919050565b6000611bab82611c2b565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b7f4368616c6c656e676520706572696f6420686173206e6f74206578706972656460008201527f2079657400000000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4e6f6e6365206d7573742062652067726561746572207468616e20746865206360008201527f757272656e74206e6f6e63650000000000000000000000000000000000000000602082015250565b7f4e6f742075736572000000000000000000000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f62616c616e6365206f6620636f6e7472616374206d757374206265203e3d207460008201527f6f2074686520746f74616c2062616c616e6365206f6620757365727300000000602082015250565b7f45787069726564206368616c6c656e676520706572696f640000000000000000600082015250565b50565b611eee81611a8a565b8114611ef957600080fd5b50565b611f0581611ae4565b8114611f1057600080fd5b5056fea2646970667358221220da1069ad4c3e749e8dc170ff5177d3575edb60ebd57cc8ea6b4928e86c5f9fa264736f6c6343000804003300000000000000000000000082a258cb20e2adb4788153cd5eb5839615ece9a000000000000000000000000069535cb2f9db4fc5f2867a27a1ed8e6612f787ba00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b3ad6ccb4950df940000000000000000000000000000000000000000000000000000000005f5e100",
  abi: [{"inputs":[{"internalType":"address payable[2]","name":"_users","type":"address[2]"},{"internalType":"uint256[2]","name":"_balances","type":"uint256[2]"},{"internalType":"uint256","name":"_expiresAt","type":"uint256"},{"internalType":"uint256","name":"_challengePeriod","type":"uint256"}],"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"}],"name":"ChallengeExit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[2]","name":"_balances","type":"uint256[2]"},{"internalType":"uint256","name":"_nonce","type":"uint256"},{"internalType":"bytes[2]","name":"_signatures","type":"bytes[2]"}],"name":"challengeExit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"challengePeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"expiresAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"isUser","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"users","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[2]","name":"_signatures","type":"bytes[2]"},{"internalType":"address","name":"_contract","type":"address"},{"internalType":"address[2]","name":"_signers","type":"address[2]"},{"internalType":"uint256[2]","name":"_balances","type":"uint256[2]"},{"internalType":"uint256","name":"_nonce","type":"uint256"}],"name":"verify","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}] as ABI,
  sources: JSON.stringify({"ECDSA.sol":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}","Strings.sol":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}","SafeMath.sol":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}","BiDirectionalPaymentChannel.sol":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\npragma experimental ABIEncoderV2;\n\n/*\nOpening a channel\n1. Alice and Bob fund a multi-sig wallet\n2. Precompute payment channel address\n3. Alice and Bob exchanges signatures of initial balances\n4. Alice and Bob creates a transaction that can deploy a payment channel from\n   the multi-sig wallet\n\nUpdate channel balances\n1. Repeat steps 1 - 3 from opening a channel\n2. From multi-sig wallet create a transaction that will\n   - delete the transaction that would have deployed the old payment channel\n   - and then create a transaction that can deploy a payment channel with the\n     new balances\n\nClosing a channel when Alice and Bob agree on the final balancež\n1. From multi-sig wallet create a transaction that will\n   - send payments to Alice and Bob\n   - and then delete the transaction that would have created the payment channel\n\nClosing a channel when Alice and Bob do not agree on the final balances\n1. Deploy payment channel from multi-sig\n2. call challengeExit() to start the process of closing a channel\n3. Alice and Bob can withdraw funds once the channel is expired\n*/\n\nimport \"./SafeMath.sol\";\nimport \"./ECDSA.sol\";\n\ncontract BiDirectionalPaymentChannel {\n    using SafeMath for uint;\n    using ECDSA for bytes32;\n\n    event ChallengeExit(address indexed sender, uint nonce);\n    event Withdraw(address indexed to, uint amount);\n\n    address payable[2] public users;\n    mapping(address => bool) public isUser;\n\n    mapping(address => uint) public balances;\n\n    uint public challengePeriod;\n    uint public expiresAt;\n    uint public nonce;\n\n    modifier checkBalances(uint[2] memory _balances) {\n        require(\n            address(this).balance >= _balances[0].add(_balances[1]),\n            \"balance of contract must be >= to the total balance of users\"\n        );\n        _;\n    }\n\n    // NOTE: deposit from multi-sig wallet\n    constructor(\n        address payable[2] memory _users,\n        uint[2] memory _balances,\n        uint _expiresAt,\n        uint _challengePeriod\n    ) payable checkBalances(_balances) {\n        require(_expiresAt > block.timestamp, \"Expiration must be > now\");\n        require(_challengePeriod > 0, \"Challenge period must be > 0\");\n\n        for (uint i = 0; i < _users.length; i++) {\n            address payable user = _users[i];\n\n            require(!isUser[user], \"user must be unique\");\n            users[i] = user;\n            isUser[user] = true;\n\n            balances[user] = _balances[i];\n        }\n\n        expiresAt = _expiresAt;\n        challengePeriod = _challengePeriod;\n    }\n\n    function verify(\n        bytes[2] memory _signatures,\n        address _contract,\n        address[2] memory _signers,\n        uint[2] memory _balances,\n        uint _nonce\n    ) public pure returns (bool) {\n        for (uint i = 0; i < _signatures.length; i++) {\n            /*\n            NOTE: sign with address of this contract to protect\n                  agains replay attack on other contracts\n            */\n            bool valid = _signers[i] ==\n                keccak256(abi.encodePacked(_contract, _balances, _nonce))\n                .toEthSignedMessageHash()\n                .recover(_signatures[i]);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    modifier checkSignatures(\n        bytes[2] memory _signatures,\n        uint[2] memory _balances,\n        uint _nonce\n    ) {\n        // Note: copy storage array to memory\n        address[2] memory signers;\n        for (uint i = 0; i < users.length; i++) {\n            signers[i] = users[i];\n        }\n\n        require(\n            verify(_signatures, address(this), signers, _balances, _nonce),\n            \"Invalid signature\"\n        );\n\n        _;\n    }\n\n    modifier onlyUser() {\n        require(isUser[msg.sender], \"Not user\");\n        _;\n    }\n\n    function challengeExit(\n        uint[2] memory _balances,\n        uint _nonce,\n        bytes[2] memory _signatures\n    )\n        public\n        onlyUser\n        checkSignatures(_signatures, _balances, _nonce)\n        checkBalances(_balances)\n    {\n        require(block.timestamp < expiresAt, \"Expired challenge period\");\n        require(_nonce > nonce, \"Nonce must be greater than the current nonce\");\n\n        for (uint i = 0; i < _balances.length; i++) {\n            balances[users[i]] = _balances[i];\n        }\n\n        nonce = _nonce;\n        expiresAt = block.timestamp.add(challengePeriod);\n\n        emit ChallengeExit(msg.sender, nonce);\n    }\n\n    function withdraw() public onlyUser {\n        require(block.timestamp >= expiresAt, \"Challenge period has not expired yet\");\n\n        uint amount = balances[msg.sender];\n        balances[msg.sender] = 0;\n\n        (bool sent, ) = msg.sender.call{value: amount}(\"\");\n        require(sent, \"Failed to send Ether\");\n\n        emit Withdraw(msg.sender, amount);\n    }\n}"}),
} as ContractStorage
