
import { ABI } from "../../src/types";
import { ContractStorage } from "../utils";

export default {
  name: "BiDirectionalPaymentChannel",
  filename: "BiDirectionalPaymentChannel.sol",
  arguments: JSON.stringify([["0x82A258cb20E2ADB4788153cd5eb5839615EcE9a0","0x69535cB2F9Db4FC5f2867A27a1eD8e6612F787bA"],["0","0"],"12947124124124241812","100000000"]),
  bytecode: "0x6080604052604051620013a1380380620013a1833981016040819052620000269162000346565b6020808401518451859262000045929062000778620002d6821b17901c565b471015620000c05760405162461bcd60e51b815260206004820152603c60248201527f62616c616e6365206f6620636f6e7472616374206d757374206265203e3d207460448201527f6f2074686520746f74616c2062616c616e6365206f662075736572730000000060648201526084015b60405180910390fd5b428311620001115760405162461bcd60e51b815260206004820152601860248201527f45787069726174696f6e206d757374206265203e206e6f7700000000000000006044820152606401620000b7565b60008211620001635760405162461bcd60e51b815260206004820152601c60248201527f4368616c6c656e676520706572696f64206d757374206265203e2030000000006044820152606401620000b7565b60005b6002811015620002c25760008682600281106200019357634e487b7160e01b600052603260045260246000fd5b602090810291909101516001600160a01b0381166000908152600290925260409091205490915060ff16156200020c5760405162461bcd60e51b815260206004820152601360248201527f75736572206d75737420626520756e69717565000000000000000000000000006044820152606401620000b7565b80600083600281106200022f57634e487b7160e01b600052603260045260246000fd5b0180546001600160a01b0319166001600160a01b0392831617905581166000908152600260208190526040909120805460ff191660011790558690839081106200028957634e487b7160e01b600052603260045260246000fd5b602090810291909101516001600160a01b0390921660009081526003909152604090205580620002b9816200043d565b91505062000166565b505060059190915560045550620004719050565b6000620002e4828462000422565b9392505050565b600082601f830112620002fc578081fd5b62000306620003eb565b80838560408601111562000318578384fd5b835b60028110156200033b5781518452602093840193909101906001016200031a565b509095945050505050565b60008060008060c085870312156200035c578384fd5b85601f8601126200036b578384fd5b62000375620003eb565b8086604088018981111562000388578788fd5b875b6002811015620003c15782516001600160a01b0381168114620003ab57898afd5b855260209485019492909201916001016200038a565b50829750620003d18a82620002eb565b60808a015160a0909a0151989b909a509650505050505050565b604080519081016001600160401b03811182821017156200041c57634e487b7160e01b600052604160045260246000fd5b60405290565b600082198211156200043857620004386200045b565b500190565b60006000198214156200045457620004546200045b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b610f2080620004816000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80634209fff1116100665780634209fff1146101235780638622a68914610146578063a0ff49991461014f578063affed0e014610162578063f3f480d91461016b57600080fd5b806321e668681461009857806327e235e3146100c0578063365b98b2146100ee5780633ccfd60b14610119575b600080fd5b6100ab6100a6366004610cb1565b610174565b60405190151581526020015b60405180910390f35b6100e06100ce366004610c97565b60036020526000908152604090205481565b6040519081526020016100b7565b6101016100fc366004610dc7565b610295565b6040516001600160a01b0390911681526020016100b7565b6101216102b5565b005b6100ab610131366004610c97565b60026020526000908152604090205460ff1681565b6100e060055481565b61012161015d366004610d71565b61043d565b6100e060065481565b6100e060045481565b6000805b60028110156102865760006102298883600281106101a657634e487b7160e01b600052603260045260246000fd5b60200201516102238988886040516020016101c393929190610ddf565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b9061078b565b6001600160a01b031686836002811061025257634e487b7160e01b600052603260045260246000fd5b60200201516001600160a01b0316149050806102735760009250505061028c565b508061027e81610ea3565b915050610178565b50600190505b95945050505050565b600081600281106102a557600080fd5b01546001600160a01b0316905081565b3360009081526002602052604090205460ff166103045760405162461bcd60e51b81526020600482015260086024820152672737ba103ab9b2b960c11b60448201526064015b60405180910390fd5b6005544210156103625760405162461bcd60e51b8152602060048201526024808201527f4368616c6c656e676520706572696f6420686173206e6f742065787069726564604482015263081e595d60e21b60648201526084016102fb565b33600081815260036020526040808220805490839055905190929083908381818185875af1925050503d80600081146103b7576040519150601f19603f3d011682016040523d82523d6000602084013e6103bc565b606091505b50509050806104045760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016102fb565b60405182815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a25050565b3360009081526002602052604090205460ff166104875760405162461bcd60e51b81526020600482015260086024820152672737ba103ab9b2b960c11b60448201526064016102fb565b808383610492610b3f565b60005b600281101561050f57600081600281106104bf57634e487b7160e01b600052603260045260246000fd5b01546001600160a01b03168282600281106104ea57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209290920201528061050781610ea3565b915050610495565b5061051d8430838686610174565b61055d5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b60448201526064016102fb565b6020870151875188916105709190610778565b4710156105e55760405162461bcd60e51b815260206004820152603c60248201527f62616c616e6365206f6620636f6e7472616374206d757374206265203e3d207460448201527f6f2074686520746f74616c2062616c616e6365206f662075736572730000000060648201526084016102fb565b60055442106106365760405162461bcd60e51b815260206004820152601860248201527f45787069726564206368616c6c656e676520706572696f64000000000000000060448201526064016102fb565b600654871161069c5760405162461bcd60e51b815260206004820152602c60248201527f4e6f6e6365206d7573742062652067726561746572207468616e20746865206360448201526b757272656e74206e6f6e636560a01b60648201526084016102fb565b60005b600281101561071f578881600281106106c857634e487b7160e01b600052603260045260246000fd5b6020020151600360008084600281106106f157634e487b7160e01b600052603260045260246000fd5b01546001600160a01b031681526020810191909152604001600020558061071781610ea3565b91505061069f565b506006879055600454610733904290610778565b60055560065460405190815233907f5050c6e2a6fc173775ce4852f893c9e5aaeff00101f3aef75e0ec263cf083ca99060200160405180910390a25050505050505050565b60006107848284610e8b565b9392505050565b600080600061079a85856107af565b915091506107a78161081f565b509392505050565b6000808251604114156107e65760208301516040840151606085015160001a6107da87828585610a23565b94509450505050610818565b8251604014156108105760208301516040840151610805868383610b10565b935093505050610818565b506000905060025b9250929050565b600081600481111561084157634e487b7160e01b600052602160045260246000fd5b141561084a5750565b600181600481111561086c57634e487b7160e01b600052602160045260246000fd5b14156108ba5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016102fb565b60028160048111156108dc57634e487b7160e01b600052602160045260246000fd5b141561092a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016102fb565b600381600481111561094c57634e487b7160e01b600052602160045260246000fd5b14156109a55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016102fb565b60048160048111156109c757634e487b7160e01b600052602160045260246000fd5b1415610a205760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016102fb565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610a5a5750600090506003610b07565b8460ff16601b14158015610a7257508460ff16601c14155b15610a835750600090506004610b07565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610ad7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610b0057600060019250925050610b07565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b01610b3187828885610a23565b935093505050935093915050565b60405180604001604052806002906020820280368337509192915050565b80356001600160a01b0381168114610b7457600080fd5b919050565b6000601f8381840112610b8a578182fd5b610b92610e31565b808486604087011115610ba3578485fd5b845b6002811015610c3657813567ffffffffffffffff80821115610bc5578788fd5b81890191508987830112610bd7578788fd5b8135602082821115610beb57610beb610ed4565b610bfc828a01601f19168201610e5a565b92508183528b81838601011115610c1157898afd5b8181850182850137908201810189905290865294850194929092019150600101610ba5565b50909695505050505050565b600082601f830112610c52578081fd5b610c5a610e31565b808385604086011115610c6b578384fd5b835b6002811015610c8c578135845260209384019390910190600101610c6d565b509095945050505050565b600060208284031215610ca8578081fd5b61078482610b5d565b600080600080600060e08688031215610cc8578081fd5b853567ffffffffffffffff811115610cde578182fd5b610cea88828901610b79565b9550506020610cfa818801610b5d565b945087605f880112610d0a578182fd5b610d12610e31565b806040890160808a018b811115610d27578586fd5b855b6002811015610d4d57610d3b83610b5d565b85529385019391850191600101610d29565b50829750610d5b8c82610c42565b999c989b50969960c00135979650505050505050565b600080600060808486031215610d85578283fd5b610d8f8585610c42565b925060408401359150606084013567ffffffffffffffff811115610db1578182fd5b610dbd86828701610b79565b9150509250925092565b600060208284031215610dd8578081fd5b5035919050565b6bffffffffffffffffffffffff198460601b16815260006014820184825b6002811015610e1c578151835260209283019290910190600101610dfd565b50505050605481019190915260740192915050565b6040805190810167ffffffffffffffff81118282101715610e5457610e54610ed4565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610e8357610e83610ed4565b604052919050565b60008219821115610e9e57610e9e610ebe565b500190565b6000600019821415610eb757610eb7610ebe565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212207553fc8fba52bf801a629f6bceefd1138a1e4daef72d8ce77984eb7216d1bb3864736f6c6343000804003300000000000000000000000082a258cb20e2adb4788153cd5eb5839615ece9a000000000000000000000000069535cb2f9db4fc5f2867a27a1ed8e6612f787ba00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b3ad6ccb4950df940000000000000000000000000000000000000000000000000000000005f5e100",
  abi: [{"inputs":[{"internalType":"address payable[2]","name":"_users","type":"address[2]"},{"internalType":"uint256[2]","name":"_balances","type":"uint256[2]"},{"internalType":"uint256","name":"_expiresAt","type":"uint256"},{"internalType":"uint256","name":"_challengePeriod","type":"uint256"}],"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"}],"name":"ChallengeExit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[2]","name":"_balances","type":"uint256[2]"},{"internalType":"uint256","name":"_nonce","type":"uint256"},{"internalType":"bytes[2]","name":"_signatures","type":"bytes[2]"}],"name":"challengeExit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"challengePeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"expiresAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"isUser","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"users","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[2]","name":"_signatures","type":"bytes[2]"},{"internalType":"address","name":"_contract","type":"address"},{"internalType":"address[2]","name":"_signers","type":"address[2]"},{"internalType":"uint256[2]","name":"_balances","type":"uint256[2]"},{"internalType":"uint256","name":"_nonce","type":"uint256"}],"name":"verify","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}] as ABI,
  sources: JSON.stringify({"ECDSA.sol":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}","Strings.sol":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}","SafeMath.sol":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}","BiDirectionalPaymentChannel.sol":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\npragma experimental ABIEncoderV2;\n\n/*\nOpening a channel\n1. Alice and Bob fund a multi-sig wallet\n2. Precompute payment channel address\n3. Alice and Bob exchanges signatures of initial balances\n4. Alice and Bob creates a transaction that can deploy a payment channel from\n   the multi-sig wallet\n\nUpdate channel balances\n1. Repeat steps 1 - 3 from opening a channel\n2. From multi-sig wallet create a transaction that will\n   - delete the transaction that would have deployed the old payment channel\n   - and then create a transaction that can deploy a payment channel with the\n     new balances\n\nClosing a channel when Alice and Bob agree on the final balancež\n1. From multi-sig wallet create a transaction that will\n   - send payments to Alice and Bob\n   - and then delete the transaction that would have created the payment channel\n\nClosing a channel when Alice and Bob do not agree on the final balances\n1. Deploy payment channel from multi-sig\n2. call challengeExit() to start the process of closing a channel\n3. Alice and Bob can withdraw funds once the channel is expired\n*/\n\nimport \"./SafeMath.sol\";\nimport \"./ECDSA.sol\";\n\ncontract BiDirectionalPaymentChannel {\n    using SafeMath for uint;\n    using ECDSA for bytes32;\n\n    event ChallengeExit(address indexed sender, uint nonce);\n    event Withdraw(address indexed to, uint amount);\n\n    address payable[2] public users;\n    mapping(address => bool) public isUser;\n\n    mapping(address => uint) public balances;\n\n    uint public challengePeriod;\n    uint public expiresAt;\n    uint public nonce;\n\n    modifier checkBalances(uint[2] memory _balances) {\n        require(\n            address(this).balance >= _balances[0].add(_balances[1]),\n            \"balance of contract must be >= to the total balance of users\"\n        );\n        _;\n    }\n\n    // NOTE: deposit from multi-sig wallet\n    constructor(\n        address payable[2] memory _users,\n        uint[2] memory _balances,\n        uint _expiresAt,\n        uint _challengePeriod\n    ) payable checkBalances(_balances) {\n        require(_expiresAt > block.timestamp, \"Expiration must be > now\");\n        require(_challengePeriod > 0, \"Challenge period must be > 0\");\n\n        for (uint i = 0; i < _users.length; i++) {\n            address payable user = _users[i];\n\n            require(!isUser[user], \"user must be unique\");\n            users[i] = user;\n            isUser[user] = true;\n\n            balances[user] = _balances[i];\n        }\n\n        expiresAt = _expiresAt;\n        challengePeriod = _challengePeriod;\n    }\n\n    function verify(\n        bytes[2] memory _signatures,\n        address _contract,\n        address[2] memory _signers,\n        uint[2] memory _balances,\n        uint _nonce\n    ) public pure returns (bool) {\n        for (uint i = 0; i < _signatures.length; i++) {\n            /*\n            NOTE: sign with address of this contract to protect\n                  agains replay attack on other contracts\n            */\n            bool valid = _signers[i] ==\n                keccak256(abi.encodePacked(_contract, _balances, _nonce))\n                .toEthSignedMessageHash()\n                .recover(_signatures[i]);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    modifier checkSignatures(\n        bytes[2] memory _signatures,\n        uint[2] memory _balances,\n        uint _nonce\n    ) {\n        // Note: copy storage array to memory\n        address[2] memory signers;\n        for (uint i = 0; i < users.length; i++) {\n            signers[i] = users[i];\n        }\n\n        require(\n            verify(_signatures, address(this), signers, _balances, _nonce),\n            \"Invalid signature\"\n        );\n\n        _;\n    }\n\n    modifier onlyUser() {\n        require(isUser[msg.sender], \"Not user\");\n        _;\n    }\n\n    function challengeExit(\n        uint[2] memory _balances,\n        uint _nonce,\n        bytes[2] memory _signatures\n    )\n        public\n        onlyUser\n        checkSignatures(_signatures, _balances, _nonce)\n        checkBalances(_balances)\n    {\n        require(block.timestamp < expiresAt, \"Expired challenge period\");\n        require(_nonce > nonce, \"Nonce must be greater than the current nonce\");\n\n        for (uint i = 0; i < _balances.length; i++) {\n            balances[users[i]] = _balances[i];\n        }\n\n        nonce = _nonce;\n        expiresAt = block.timestamp.add(challengePeriod);\n\n        emit ChallengeExit(msg.sender, nonce);\n    }\n\n    function withdraw() public onlyUser {\n        require(block.timestamp >= expiresAt, \"Challenge period has not expired yet\");\n\n        uint amount = balances[msg.sender];\n        balances[msg.sender] = 0;\n\n        (bool sent, ) = msg.sender.call{value: amount}(\"\");\n        require(sent, \"Failed to send Ether\");\n\n        emit Withdraw(msg.sender, amount);\n    }\n}"}),
} as ContractStorage
