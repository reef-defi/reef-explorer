
import { ABI } from "../../src/types";
import { ContractStorage } from "../utils";

export default {
  name: "BasicNFT",
  filename: "EnglishAuction.sol",
  arguments: JSON.stringify([]),
  bytecode: "0x608060405234801561001057600080fd5b506101d1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806323b872dd1461003b578063a9059cbb14610057575b600080fd5b610055600480360381019061005091906100a6565b610073565b005b610071600480360381019061006c91906100f5565b610078565b005b505050565b5050565b60008135905061008b8161016d565b92915050565b6000813590506100a081610184565b92915050565b6000806000606084860312156100bb57600080fd5b60006100c98682870161007c565b93505060206100da8682870161007c565b92505060406100eb86828701610091565b9150509250925092565b6000806040838503121561010857600080fd5b60006101168582860161007c565b925050602061012785828601610091565b9150509250929050565b600061013c82610143565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61017681610131565b811461018157600080fd5b50565b61018d81610163565b811461019857600080fd5b5056fea2646970667358221220a0db5ac36964491a1108a0b1e84891624f02ea99400da181e63493ed51e8a0a164736f6c63430008040033",
  abi: [{"inputs":[{"internalType":"address","name":"add","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}] as ABI,
  sources: JSON.stringify({"EnglishAuction.sol":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IERC721 {\n    function transfer(address, uint) external;\n\n    function transferFrom(\n        address,\n        address,\n        uint\n    ) external;\n}\n\ncontract EnglishAuction {\n    event Start();\n    event Bid(address indexed sender, uint amount);\n    event Withdraw(address indexed bidder, uint amount);\n    event End(address winner, uint amount);\n\n    IERC721 public nft;\n    uint public nftId;\n\n    address payable public seller;\n    uint public endAt;\n    bool public started;\n    bool public ended;\n\n    address public highestBidder;\n    uint public highestBid;\n    mapping(address => uint) public bids;\n\n    constructor(\n        address _nft,\n        uint _nftId,\n        uint _startingBid\n    ) {\n        nft = IERC721(_nft);\n        nftId = _nftId;\n\n        seller = payable(msg.sender);\n        highestBid = _startingBid;\n    }\n\n    function start() external {\n        require(!started, \"started\");\n        require(msg.sender == seller, \"not seller\");\n\n        nft.transferFrom(msg.sender, address(this), nftId);\n        started = true;\n        endAt = block.timestamp + 7 days;\n\n        emit Start();\n    }\n\n    function bid() external payable {\n        require(started, \"not started\");\n        require(block.timestamp < endAt, \"ended\");\n        require(msg.value > highestBid, \"value < highest\");\n\n        if (highestBidder != address(0)) {\n            bids[highestBidder] += highestBid;\n        }\n\n        highestBidder = msg.sender;\n        highestBid = msg.value;\n\n        emit Bid(msg.sender, msg.value);\n    }\n\n    function withdraw() external {\n        uint bal = bids[msg.sender];\n        bids[msg.sender] = 0;\n        payable(msg.sender).transfer(bal);\n\n        emit Withdraw(msg.sender, bal);\n    }\n\n    function end() external {\n        require(started, \"not started\");\n        require(block.timestamp >= endAt, \"not ended\");\n        require(!ended, \"ended\");\n\n        ended = true;\n        if (highestBidder != address(0)) {\n            nft.transfer(highestBidder, nftId);\n            seller.transfer(highestBid);\n        } else {\n            nft.transfer(seller, nftId);\n        }\n\n        emit End(highestBidder, highestBid);\n    }\n}\n\ncontract BasicNFT is IERC721 {\n  \n    function transfer(address add, uint value) external override{\n\n    }\n\n    function transferFrom(\n        address,\n        address,\n        uint\n    ) external override {\n\n    }\n}"}),
} as ContractStorage
