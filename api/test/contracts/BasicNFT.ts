
import { ABI } from "../../src/types";
import { ContractStorage } from "../utils";

export default {
  name: "BasicNFT",
  filename: "EnglishAuction.sol",
  arguments: JSON.stringify([]),
  bytecode: "0x608060405234801561001057600080fd5b50610105806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806323b872dd146037578063a9059cbb146049575b600080fd5b604760423660046073565b505050565b005b6047605436600460a9565b5050565b80356001600160a01b0381168114606e57600080fd5b919050565b6000806000606084860312156086578283fd5b608d846058565b92506099602085016058565b9150604084013590509250925092565b6000806040838503121560ba578081fd5b60c1836058565b94602093909301359350505056fea2646970667358221220d3ca6b1615cff67017f08c8c48ea8970f506e6048e5486e2de14e690ca31f75564736f6c63430008040033",
  abi: [{"inputs":[{"internalType":"address","name":"add","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}] as ABI,
  sources: JSON.stringify({"EnglishAuction.sol":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IERC721 {\n    function transfer(address, uint) external;\n\n    function transferFrom(\n        address,\n        address,\n        uint\n    ) external;\n}\n\ncontract EnglishAuction {\n    event Start();\n    event Bid(address indexed sender, uint amount);\n    event Withdraw(address indexed bidder, uint amount);\n    event End(address winner, uint amount);\n\n    IERC721 public nft;\n    uint public nftId;\n\n    address payable public seller;\n    uint public endAt;\n    bool public started;\n    bool public ended;\n\n    address public highestBidder;\n    uint public highestBid;\n    mapping(address => uint) public bids;\n\n    constructor(\n        address _nft,\n        uint _nftId,\n        uint _startingBid\n    ) {\n        nft = IERC721(_nft);\n        nftId = _nftId;\n\n        seller = payable(msg.sender);\n        highestBid = _startingBid;\n    }\n\n    function start() external {\n        require(!started, \"started\");\n        require(msg.sender == seller, \"not seller\");\n\n        nft.transferFrom(msg.sender, address(this), nftId);\n        started = true;\n        endAt = block.timestamp + 7 days;\n\n        emit Start();\n    }\n\n    function bid() external payable {\n        require(started, \"not started\");\n        require(block.timestamp < endAt, \"ended\");\n        require(msg.value > highestBid, \"value < highest\");\n\n        if (highestBidder != address(0)) {\n            bids[highestBidder] += highestBid;\n        }\n\n        highestBidder = msg.sender;\n        highestBid = msg.value;\n\n        emit Bid(msg.sender, msg.value);\n    }\n\n    function withdraw() external {\n        uint bal = bids[msg.sender];\n        bids[msg.sender] = 0;\n        payable(msg.sender).transfer(bal);\n\n        emit Withdraw(msg.sender, bal);\n    }\n\n    function end() external {\n        require(started, \"not started\");\n        require(block.timestamp >= endAt, \"not ended\");\n        require(!ended, \"ended\");\n\n        ended = true;\n        if (highestBidder != address(0)) {\n            nft.transfer(highestBidder, nftId);\n            seller.transfer(highestBid);\n        } else {\n            nft.transfer(seller, nftId);\n        }\n\n        emit End(highestBidder, highestBid);\n    }\n}\n\ncontract BasicNFT is IERC721 {\n  \n    function transfer(address add, uint value) external override{\n\n    }\n\n    function transferFrom(\n        address,\n        address,\n        uint\n    ) external override {\n\n    }\n}"}),
} as ContractStorage
