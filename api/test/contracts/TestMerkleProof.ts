
import { ABI } from "../../src/types";
import { ContractStorage } from "../utils";

export default {
  name: "TestMerkleProof",
  filename: "MerkleTree.sol",
  arguments: JSON.stringify([]),
  bytecode: "0x60806040523480156200001157600080fd5b50600060405180608001604052806040518060400160405280600c81526020017f616c696365202d3e20626f62000000000000000000000000000000000000000081525081526020016040518060400160405280600b81526020017f626f62202d3e206461766500000000000000000000000000000000000000000081525081526020016040518060400160405280600e81526020017f6361726f6c202d3e20616c69636500000000000000000000000000000000000081525081526020016040518060400160405280600b81526020017f64617665202d3e20626f62000000000000000000000000000000000000000000815250815250905060005b6004811015620001bd57600082826004811062000154577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201516040516020016200016b9190620003b9565b6040516020818303038152906040528051906020012090806001815401808255809150506001900390600052602060002001600090919091909150558080620001b49062000502565b9150506200010e565b5060006004905060005b60008211156200032e5760005b600183620001e391906200047d565b81101562000306576000808284620001fc9190620003e8565b8154811062000234577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154600060018486620002519190620003e8565b6200025d9190620003e8565b8154811062000295577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154604051602001620002b392919062000389565b604051602081830303815290604052805190602001209080600181540180825580915050600190039060005260206000200160009091909190915055600281620002fe9190620003e8565b9050620001d4565b508181620003159190620003e8565b905060028262000326919062000445565b9150620001c7565b505050620005b8565b6200034c6200034682620004b8565b62000550565b82525050565b60006200035f82620003d2565b6200036b8185620003dd565b93506200037d818560208601620004cc565b80840191505092915050565b600062000397828562000337565b602082019150620003a9828462000337565b6020820191508190509392505050565b6000620003c7828462000352565b915081905092915050565b600081519050919050565b600081905092915050565b6000620003f582620004c2565b91506200040283620004c2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200043a57620004396200055a565b5b828201905092915050565b60006200045282620004c2565b91506200045f83620004c2565b92508262000472576200047162000589565b5b828204905092915050565b60006200048a82620004c2565b91506200049783620004c2565b925082821015620004ad57620004ac6200055a565b5b828203905092915050565b6000819050919050565b6000819050919050565b60005b83811015620004ec578082015181840152602081019050620004cf565b83811115620004fc576000848401525b50505050565b60006200050f82620004c2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200054557620005446200055a565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6106c680620005c86000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806321fb335c14610046578063501895ae146100765780635ca1e165146100a6575b600080fd5b610060600480360381019061005b91906102fe565b6100c4565b60405161006d9190610403565b60405180910390f35b610090600480360381019061008b9190610379565b6101be565b60405161009d919061041e565b60405180910390f35b6100ae6101e2565b6040516100bb919061041e565b60405180910390f35b60008083905060005b86518110156101af576000878281518110610111577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600060028661012a9190610593565b14156101605782816040516020016101439291906103d7565b60405160208183030381529060405280519060200120925061018c565b80836040516020016101739291906103d7565b6040516020818303038152906040528051906020012092505b600285610199919061048a565b94505080806101a790610540565b9150506100cd565b50848114915050949350505050565b600081815481106101ce57600080fd5b906000526020600020016000915090505481565b60008060016000805490506101f791906104bb565b8154811061022e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905090565b600061025161024c8461045e565b610439565b9050808382526020820190508285602086028201111561027057600080fd5b60005b858110156102a0578161028688826102d4565b845260208401935060208301925050600181019050610273565b5050509392505050565b600082601f8301126102bb57600080fd5b81356102cb84826020860161023e565b91505092915050565b6000813590506102e381610662565b92915050565b6000813590506102f881610679565b92915050565b6000806000806080858703121561031457600080fd5b600085013567ffffffffffffffff81111561032e57600080fd5b61033a878288016102aa565b945050602061034b878288016102d4565b935050604061035c878288016102d4565b925050606061036d878288016102e9565b91505092959194509250565b60006020828403121561038b57600080fd5b6000610399848285016102e9565b91505092915050565b6103ab816104ef565b82525050565b6103ba816104fb565b82525050565b6103d16103cc826104fb565b610589565b82525050565b60006103e382856103c0565b6020820191506103f382846103c0565b6020820191508190509392505050565b600060208201905061041860008301846103a2565b92915050565b600060208201905061043360008301846103b1565b92915050565b6000610443610454565b905061044f828261050f565b919050565b6000604051905090565b600067ffffffffffffffff82111561047957610478610622565b5b602082029050602081019050919050565b600061049582610505565b91506104a083610505565b9250826104b0576104af6105f3565b5b828204905092915050565b60006104c682610505565b91506104d183610505565b9250828210156104e4576104e36105c4565b5b828203905092915050565b60008115159050919050565b6000819050919050565b6000819050919050565b61051882610651565b810181811067ffffffffffffffff8211171561053757610536610622565b5b80604052505050565b600061054b82610505565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561057e5761057d6105c4565b5b600182019050919050565b6000819050919050565b600061059e82610505565b91506105a983610505565b9250826105b9576105b86105f3565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61066b816104fb565b811461067657600080fd5b50565b61068281610505565b811461068d57600080fd5b5056fea264697066735822122008138b69369d6dcbb0de1370c8eadac8f91b497973801995ef82ed0559af0c8e64736f6c63430008040033",
  abi: [{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"getRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"hashes","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"bytes32","name":"root","type":"bytes32"},{"internalType":"bytes32","name":"leaf","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"verify","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"}] as ABI,
  sources: JSON.stringify({"MerkleTree.sol":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract MerkleProof {\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        uint index\n    ) public pure returns (bool) {\n        bytes32 hash = leaf;\n\n        for (uint i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (index % 2 == 0) {\n                hash = keccak256(abi.encodePacked(hash, proofElement));\n            } else {\n                hash = keccak256(abi.encodePacked(proofElement, hash));\n            }\n\n            index = index / 2;\n        }\n\n        return hash == root;\n    }\n}\n\ncontract MerkleTree is MerkleProof {\n    bytes32[] public hashes;\n\n    constructor() {\n        string[4] memory transactions = [\n            \"alice -> bob\",\n            \"bob -> dave\",\n            \"carol -> alice\",\n            \"dave -> bob\"\n        ];\n\n        for (uint i = 0; i < transactions.length; i++) {\n            hashes.push(keccak256(abi.encodePacked(transactions[i])));\n        }\n\n        uint n = transactions.length;\n        uint offset = 0;\n\n        while (n > 0) {\n            for (uint i = 0; i < n - 1; i += 2) {\n                hashes.push(\n                    keccak256(\n                        abi.encodePacked(hashes[offset + i], hashes[offset + i + 1])\n                    )\n                );\n            }\n            offset += n;\n            n = n / 2;\n        }\n    }\n\n    function getRoot() public view returns (bytes32) {\n        return hashes[hashes.length - 1];\n    }\n\n    /* verify\n    3rd leaf\n    0x1bbd78ae6188015c4a6772eb1526292b5985fc3272ead4c65002240fb9ae5d13\n\n    root\n    0x074b43252ffb4a469154df5fb7fe4ecce30953ba8b7095fe1e006185f017ad10\n\n    index\n    2\n\n    proof\n    0x948f90037b4ea787c14540d9feb1034d4a5bc251b9b5f8e57d81e4b470027af8\n    0x63ac1b92046d474f84be3aa0ee04ffe5600862228c81803cce07ac40484aee43\n    */\n}"}),
} as ContractStorage
