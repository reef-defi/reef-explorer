
import { ABI } from "../../src/types";
import { ContractStorage } from "../utils";

export default {
  name: "UniDirectionalPaymentChannel",
  filename: "UniDirectionalPaymentChannel.sol",
  arguments: JSON.stringify(["0x82A258cb20E2ADB4788153cd5eb5839615EcE9a0"]),
  bytecode: "0x6080604052604051620018443803806200184483398181016040528101906200002991906200015b565b6001600081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200009b90620001ae565b60405180910390fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062093a8042620001379190620001e1565b60038190555050620002ee565b6000815190506200015581620002d4565b92915050565b6000602082840312156200016e57600080fd5b60006200017e8482850162000144565b91505092915050565b600062000196601783620001d0565b9150620001a382620002ab565b602082019050919050565b60006020820190508181036000830152620001c98162000187565b9050919050565b600082825260208201905092915050565b6000620001ee8262000272565b9150620001fb8362000272565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200023357620002326200027c565b5b828201905092915050565b60006200024b8262000252565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f7265636569766572203d207a65726f2061646472657373000000000000000000600082015250565b620002df816200023e565b8114620002eb57600080fd5b50565b61154680620002fe6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806385852ce41161005b57806385852ce4146101275780638622a68914610157578063ea8a1af014610175578063f7260d3e1461017f57610088565b8063415ffba71461008d578063552f50b6146100a957806367e404ce146100d95780636b2fafa9146100f7575b600080fd5b6100a760048036038101906100a29190610c54565b61019d565b005b6100c360048036038101906100be9190610c2b565b6103cd565b6040516100d09190610f79565b60405180910390f35b6100e16103df565b6040516100ee9190610f43565b60405180910390f35b610111600480360381019061010c9190610c2b565b610405565b60405161011e9190610f79565b60405180910390f35b610141600480360381019061013c9190610c54565b610417565b60405161014e9190610f5e565b60405180910390f35b61015f61042b565b60405161016c9190611119565b60405180910390f35b61017d610431565b005b610187610541565b6040516101949190610f43565b60405180910390f35b600260005414156101e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101da906110d9565b60405180910390fd5b6002600081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461027b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610272906110f9565b60405180910390fd5b6102858282610567565b6102c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102bb90611019565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360405161030c90610f2e565b60006040518083038185875af1925050503d8060008114610349576040519150601f19603f3d011682016040523d82523d6000602084013e61034e565b606091505b5050905080610392576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038990611039565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b60006103d8826105dc565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610410826105f6565b9050919050565b60006104238383610567565b905092915050565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b8906110b9565b60405180910390fd5b600354421015610506576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fd90611099565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166105bd836105af866105dc565b61062890919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1614905092915050565b60006105ef6105ea836105f6565b61064f565b9050919050565b6000308260405160200161060b929190610edc565b604051602081830303815290604052805190602001209050919050565b6000806000610637858561067f565b9150915061064481610702565b819250505092915050565b6000816040516020016106629190610f08565b604051602081830303815290604052805190602001209050919050565b6000806041835114156106c15760008060006020860151925060408601519150606086015160001a90506106b587828585610a53565b945094505050506106fb565b6040835114156106f25760008060208501519150604085015190506106e7868383610b60565b9350935050506106fb565b60006002915091505b9250929050565b6000600481111561073c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115610775577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561078057610a50565b600160048111156107ba577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156107f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082b90610fd9565b60405180910390fd5b6002600481111561086e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156108a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156108e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108df90610ff9565b60405180910390fd5b60036004811115610922577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561095b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561099c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099390611059565b60405180910390fd5b6004808111156109d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115610a0e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610a4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4690611079565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610a8e576000600391509150610b57565b601b8560ff1614158015610aa65750601c8560ff1614155b15610ab8576000600491509150610b57565b600060018787878760405160008152602001604052604051610add9493929190610f94565b6020604051602081039080840390855afa158015610aff573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b4e57600060019250925050610b57565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c019050610ba087828885610a53565b935093505050935093915050565b6000610bc1610bbc84611159565b611134565b905082815260208101848484011115610bd957600080fd5b610be4848285611222565b509392505050565b600082601f830112610bfd57600080fd5b8135610c0d848260208601610bae565b91505092915050565b600081359050610c25816114f9565b92915050565b600060208284031215610c3d57600080fd5b6000610c4b84828501610c16565b91505092915050565b60008060408385031215610c6757600080fd5b6000610c7585828601610c16565b925050602083013567ffffffffffffffff811115610c9257600080fd5b610c9e85828601610bec565b9150509250929050565b610cb1816111c3565b82525050565b610cc8610cc3826111b1565b611262565b82525050565b610cd7816111d5565b82525050565b610ce6816111e1565b82525050565b610cfd610cf8826111e1565b611274565b82525050565b6000610d10601883611195565b9150610d1b826112e7565b602082019050919050565b6000610d33601f83611195565b9150610d3e82611310565b602082019050919050565b6000610d56601c836111a6565b9150610d6182611339565b601c82019050919050565b6000610d79600b83611195565b9150610d8482611362565b602082019050919050565b6000610d9c601483611195565b9150610da78261138b565b602082019050919050565b6000610dbf602283611195565b9150610dca826113b4565b604082019050919050565b6000610de2602283611195565b9150610ded82611403565b604082019050919050565b6000610e05600883611195565b9150610e1082611452565b602082019050919050565b6000610e28600783611195565b9150610e338261147b565b602082019050919050565b6000610e4b60008361118a565b9150610e56826114a4565b600082019050919050565b6000610e6e601f83611195565b9150610e79826114a7565b602082019050919050565b6000610e91600983611195565b9150610e9c826114d0565b602082019050919050565b610eb08161120b565b82525050565b610ec7610ec28261120b565b611290565b82525050565b610ed681611215565b82525050565b6000610ee88285610cb7565b601482019150610ef88284610eb6565b6020820191508190509392505050565b6000610f1382610d49565b9150610f1f8284610cec565b60208201915081905092915050565b6000610f3982610e3e565b9150819050919050565b6000602082019050610f586000830184610ca8565b92915050565b6000602082019050610f736000830184610cce565b92915050565b6000602082019050610f8e6000830184610cdd565b92915050565b6000608082019050610fa96000830187610cdd565b610fb66020830186610ecd565b610fc36040830185610cdd565b610fd06060830184610cdd565b95945050505050565b60006020820190508181036000830152610ff281610d03565b9050919050565b6000602082019050818103600083015261101281610d26565b9050919050565b6000602082019050818103600083015261103281610d6c565b9050919050565b6000602082019050818103600083015261105281610d8f565b9050919050565b6000602082019050818103600083015261107281610db2565b9050919050565b6000602082019050818103600083015261109281610dd5565b9050919050565b600060208201905081810360008301526110b281610df8565b9050919050565b600060208201905081810360008301526110d281610e1b565b9050919050565b600060208201905081810360008301526110f281610e61565b9050919050565b6000602082019050818103600083015261111281610e84565b9050919050565b600060208201905061112e6000830184610ea7565b92915050565b600061113e61114f565b905061114a8282611231565b919050565b6000604051905090565b600067ffffffffffffffff8211156111745761117361129a565b5b61117d826112c9565b9050602081019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006111bc826111eb565b9050919050565b60006111ce826111eb565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b61123a826112c9565b810181811067ffffffffffffffff821117156112595761125861129a565b5b80604052505050565b600061126d8261127e565b9050919050565b6000819050919050565b6000611289826112da565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f696e76616c696420736967000000000000000000000000000000000000000000600082015250565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f2165787069726564000000000000000000000000000000000000000000000000600082015250565b7f2173656e64657200000000000000000000000000000000000000000000000000600082015250565b50565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f2172656365697665720000000000000000000000000000000000000000000000600082015250565b6115028161120b565b811461150d57600080fd5b5056fea2646970667358221220df62e019ae875e0aa9fa2194a6b5845b1392a33802a6340567bb31f40481b5f664736f6c6343000804003300000000000000000000000082a258cb20e2adb4788153cd5eb5839615ece9a0",
  abi: [{"inputs":[{"internalType":"address payable","name":"_receiver","type":"address"}],"stateMutability":"payable","type":"constructor"},{"inputs":[],"name":"cancel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes","name":"_sig","type":"bytes"}],"name":"close","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"expiresAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"getEthSignedHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"getHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"receiver","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"sender","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes","name":"_sig","type":"bytes"}],"name":"verify","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}] as ABI,
  sources: JSON.stringify({"ECDSA.sol":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}","Strings.sol":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}","ReentrancyGuard.sol":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}","UniDirectionalPaymentChannel.sol":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.3;\n\nimport \"./ECDSA.sol\";\nimport \"./ReentrancyGuard.sol\";\n\ncontract UniDirectionalPaymentChannel is ReentrancyGuard {\n    using ECDSA for bytes32;\n\n    address payable public sender;\n    address payable public receiver;\n\n    uint private constant DURATION = 7 * 24 * 60 * 60;\n    uint public expiresAt;\n\n    constructor(address payable _receiver) payable {\n        require(_receiver != address(0), \"receiver = zero address\");\n        sender = payable(msg.sender);\n        receiver = _receiver;\n        expiresAt = block.timestamp + DURATION;\n    }\n\n    function _getHash(uint _amount) private view returns (bytes32) {\n        // NOTE: sign with address of this contract to protect agains\n        // replay attack on other contracts\n        return keccak256(abi.encodePacked(address(this), _amount));\n    }\n\n    function getHash(uint _amount) external view returns (bytes32) {\n        return _getHash(_amount);\n    }\n\n    function _getEthSignedHash(uint _amount) private view returns (bytes32) {\n        return _getHash(_amount).toEthSignedMessageHash();\n    }\n\n    function getEthSignedHash(uint _amount) external view returns (bytes32) {\n        return _getEthSignedHash(_amount);\n    }\n\n    function _verify(uint _amount, bytes memory _sig) private view returns (bool) {\n        return _getEthSignedHash(_amount).recover(_sig) == sender;\n    }\n\n    function verify(uint _amount, bytes memory _sig) external view returns (bool) {\n        return _verify(_amount, _sig);\n    }\n\n    function close(uint _amount, bytes memory _sig) external nonReentrant {\n        require(msg.sender == receiver, \"!receiver\");\n        require(_verify(_amount, _sig), \"invalid sig\");\n\n        (bool sent, ) = receiver.call{value: _amount}(\"\");\n        require(sent, \"Failed to send Ether\");\n        selfdestruct(sender);\n    }\n\n    function cancel() external {\n        require(msg.sender == sender, \"!sender\");\n        require(block.timestamp >= expiresAt, \"!expired\");\n        selfdestruct(sender);\n    }\n}"}),
} as ContractStorage
