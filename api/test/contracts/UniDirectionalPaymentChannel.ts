
import { ABI } from "../../src/types";
import { ContractStorage } from "../utils";

export default {
  name: "UniDirectionalPaymentChannel",
  filename: "UniDirectionalPaymentChannel.sol",
  arguments: JSON.stringify(["0x82A258cb20E2ADB4788153cd5eb5839615EcE9a0"]),
  bytecode: "0x6080604052604051610a42380380610a42833981016040819052610022916100c0565b60016000556001600160a01b0381166100815760405162461bcd60e51b815260206004820152601760248201527f7265636569766572203d207a65726f2061646472657373000000000000000000604482015260640160405180910390fd5b60018054336001600160a01b031991821617909155600280549091166001600160a01b0383161790556100b762093a80426100ee565b60035550610112565b6000602082840312156100d1578081fd5b81516001600160a01b03811681146100e7578182fd5b9392505050565b6000821982111561010d57634e487b7160e01b81526011600452602481fd5b500190565b610921806101216000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806385852ce41161005b57806385852ce4146101065780638622a68914610129578063ea8a1af014610132578063f7260d3e1461013a57600080fd5b8063415ffba71461008d578063552f50b6146100a257806367e404ce146100c85780636b2fafa9146100f3575b600080fd5b6100a061009b36600461081f565b61014d565b005b6100b56100b0366004610807565b6102dc565b6040519081526020015b60405180910390f35b6001546100db906001600160a01b031681565b6040516001600160a01b0390911681526020016100bf565b6100b5610101366004610807565b6102ed565b61011961011436600461081f565b6102f8565b60405190151581526020016100bf565b6100b560035481565b6100a061030b565b6002546100db906001600160a01b031681565b600260005414156101a55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000819055546001600160a01b031633146101f05760405162461bcd60e51b815260206004820152600960248201526810b932b1b2b4bb32b960b91b604482015260640161019c565b6101fa828261038c565b6102345760405162461bcd60e51b815260206004820152600b60248201526a696e76616c69642073696760a81b604482015260640161019c565b6002546040516000916001600160a01b03169084908381818185875af1925050503d8060008114610281576040519150601f19603f3d011682016040523d82523d6000602084013e610286565b606091505b50509050806102ce5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b604482015260640161019c565b6001546001600160a01b0316ff5b60006102e7826103bf565b92915050565b60006102e7826103d2565b6000610304838361038c565b9392505050565b6001546001600160a01b0316331461034f5760405162461bcd60e51b815260206004820152600760248201526610b9b2b73232b960c91b604482015260640161019c565b6003544210156102ce5760405162461bcd60e51b815260206004820152600860248201526708595e1c1a5c995960c21b604482015260640161019c565b6001546000906001600160a01b03166103ae836103a8866103bf565b90610418565b6001600160a01b0316149392505050565b60006102e76103cd836103d2565b61043c565b6040516bffffffffffffffffffffffff193060601b166020820152603481018290526000906054015b604051602081830303815290604052805190602001209050919050565b60008060006104278585610477565b91509150610434816104e7565b509392505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c016103fb565b6000808251604114156104ae5760208301516040840151606085015160001a6104a2878285856106eb565b945094505050506104e0565b8251604014156104d857602083015160408401516104cd8683836107d8565b9350935050506104e0565b506000905060025b9250929050565b600081600481111561050957634e487b7160e01b600052602160045260246000fd5b14156105125750565b600181600481111561053457634e487b7160e01b600052602160045260246000fd5b14156105825760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161019c565b60028160048111156105a457634e487b7160e01b600052602160045260246000fd5b14156105f25760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161019c565b600381600481111561061457634e487b7160e01b600052602160045260246000fd5b141561066d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161019c565b600481600481111561068f57634e487b7160e01b600052602160045260246000fd5b14156106e85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161019c565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561072257506000905060036107cf565b8460ff16601b1415801561073a57508460ff16601c14155b1561074b57506000905060046107cf565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561079f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107c8576000600192509250506107cf565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b016107f9878288856106eb565b935093505050935093915050565b600060208284031215610818578081fd5b5035919050565b60008060408385031215610831578081fd5b82359150602083013567ffffffffffffffff8082111561084f578283fd5b818501915085601f830112610862578283fd5b813581811115610874576108746108d5565b604051601f8201601f19908116603f0116810190838211818310171561089c5761089c6108d5565b816040528281528860208487010111156108b4578586fd5b82602086016020830137856020848301015280955050505050509250929050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220038c178fe0bfc6983403c9bcac1f438f7a13f5007e093c78d043d795b2d9b06c64736f6c6343000804003300000000000000000000000082a258cb20e2adb4788153cd5eb5839615ece9a0",
  abi: [{"inputs":[{"internalType":"address payable","name":"_receiver","type":"address"}],"stateMutability":"payable","type":"constructor"},{"inputs":[],"name":"cancel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes","name":"_sig","type":"bytes"}],"name":"close","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"expiresAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"getEthSignedHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"getHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"receiver","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"sender","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes","name":"_sig","type":"bytes"}],"name":"verify","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}] as ABI,
  sources: JSON.stringify({"ECDSA.sol":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}","Strings.sol":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}","ReentrancyGuard.sol":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}","UniDirectionalPaymentChannel.sol":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.3;\n\nimport \"./ECDSA.sol\";\nimport \"./ReentrancyGuard.sol\";\n\ncontract UniDirectionalPaymentChannel is ReentrancyGuard {\n    using ECDSA for bytes32;\n\n    address payable public sender;\n    address payable public receiver;\n\n    uint private constant DURATION = 7 * 24 * 60 * 60;\n    uint public expiresAt;\n\n    constructor(address payable _receiver) payable {\n        require(_receiver != address(0), \"receiver = zero address\");\n        sender = payable(msg.sender);\n        receiver = _receiver;\n        expiresAt = block.timestamp + DURATION;\n    }\n\n    function _getHash(uint _amount) private view returns (bytes32) {\n        // NOTE: sign with address of this contract to protect agains\n        // replay attack on other contracts\n        return keccak256(abi.encodePacked(address(this), _amount));\n    }\n\n    function getHash(uint _amount) external view returns (bytes32) {\n        return _getHash(_amount);\n    }\n\n    function _getEthSignedHash(uint _amount) private view returns (bytes32) {\n        return _getHash(_amount).toEthSignedMessageHash();\n    }\n\n    function getEthSignedHash(uint _amount) external view returns (bytes32) {\n        return _getEthSignedHash(_amount);\n    }\n\n    function _verify(uint _amount, bytes memory _sig) private view returns (bool) {\n        return _getEthSignedHash(_amount).recover(_sig) == sender;\n    }\n\n    function verify(uint _amount, bytes memory _sig) external view returns (bool) {\n        return _verify(_amount, _sig);\n    }\n\n    function close(uint _amount, bytes memory _sig) external nonReentrant {\n        require(msg.sender == receiver, \"!receiver\");\n        require(_verify(_amount, _sig), \"invalid sig\");\n\n        (bool sent, ) = receiver.call{value: _amount}(\"\");\n        require(sent, \"Failed to send Ether\");\n        selfdestruct(sender);\n    }\n\n    function cancel() external {\n        require(msg.sender == sender, \"!sender\");\n        require(block.timestamp >= expiresAt, \"!expired\");\n        selfdestruct(sender);\n    }\n}"}),
} as ContractStorage
